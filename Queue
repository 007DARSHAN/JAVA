// Queue.java
public class Queue<T> {
    private java.util.LinkedList<T> list = new java.util.LinkedList<>();

    // Enqueue an item to the queue
    public void enqueue(T item) {
        list.addLast(item);
    }

    // Dequeue an item from the queue
    public T dequeue() {
        if (isEmpty()) {
            throw new java.util.NoSuchElementException();
        }
        return list.removeFirst();
    }

    // Peek at the front item of the queue
    public T peek() {
        if (isEmpty()) {
            throw new java.util.NoSuchElementException();
        }
        return list.getFirst();
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return list.isEmpty();
    }
    
    // Get the size of the queue
    public int size() {
        return list.size();
    }
    
    // Main method to test the queue
    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(10);
        queue.enqueue(20);
        System.out.println("Front item: " + queue.peek());
        System.out.println("Dequeued item: " + queue.dequeue());
        System.out.println("Queue empty: " + queue.isEmpty());
    }
}
